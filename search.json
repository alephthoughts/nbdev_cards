[
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card–A basic playing card",
    "section": "",
    "text": "A given card can have following ranks and suits\nWe will be representing playing cards clubs and ranks. These are the suits:\nFor instance suits at index 0:\nThese are the ranks:\nFor instance rank at index 1 (Note that there is no card at index 0 to match the rank with indices.)"
  },
  {
    "objectID": "card.html#comparison-operators",
    "href": "card.html#comparison-operators",
    "title": "card–A basic playing card",
    "section": "Comparison Operators",
    "text": "Comparison Operators\n\ntest_eq(Card(suit=1,rank=3), Card(suit=1, rank=3))\n\n\nassert Card(suit=1, rank=3) < Card(suit=1, rank=4)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards",
    "section": "Install",
    "text": "Install\npip install nbdev-cards"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards",
    "section": "How to use",
    "text": "How to use\nThe Library provides card. You can create, display or compare playing cards\n\nCard(1,3)\n\n♦️, 3\n\n\nSuits are displayed according to these numbers.\n\nsuits\n\n['♠️', '♦️', '♥️', '♣️']"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "suits\n\n['♠️', '♦️', '♥️', '♣️']\n\n\n\n\nDeck\n\n Deck ()\n\nA deck of 52 cards not including jokers\nWhen we initially create a deck, it will present all the cards.\n\ndeck = Deck()\ndeck\n\n♠️, A; ♠️, 2; ♠️, 3; ♠️, 4; ♠️, 5; ♠️, 6; ♠️, 7; ♠️, 8; ♠️, 9; ♠️, 10; ♠️, J; ♠️, Q; ♠️, K; ♦️, A; ♦️, 2; ♦️, 3; ♦️, 4; ♦️, 5; ♦️, 6; ♦️, 7; ♦️, 8; ♦️, 9; ♦️, 10; ♦️, J; ♦️, Q; ♦️, K; ♥️, A; ♥️, 2; ♥️, 3; ♥️, 4; ♥️, 5; ♥️, 6; ♥️, 7; ♥️, 8; ♥️, 9; ♥️, 10; ♥️, J; ♥️, Q; ♥️, K; ♣️, A; ♣️, 2; ♣️, 3; ♣️, 4; ♣️, 5; ♣️, 6; ♣️, 7; ♣️, 8; ♣️, 9; ♣️, 10; ♣️, J; ♣️, Q; ♣️, K\n\n\nThere should be 52 cards\n\nlen(deck)\n\n52\n\n\nWe check check if Ace of spades is in the deck\n\nCard(1,1) in deck\n\nTrue\n\n\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nPop the card with index idx in the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nIndex of the card to be removed, defaulting to the last card in the deck\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))\n\nThere are 51 cards left in the deck now\n\ndeck.pop()\n\n♣️, Q\n\n\n\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cards.card.Card)\n\nRemove a card from the deck\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nRemoves a card from the deck and raises an exception if the card is not there\n\n\n\n\ncard23 = Card(2,3)\n\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffle the deck of cards\n\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\ndraw_n(13, replace=False)\n\n[♠️, 4,\n ♦️, 3,\n ♦️, 9,\n ♥️, 2,\n ♥️, 9,\n ♠️, 7,\n ♠️, 9,\n ♦️, Q,\n ♦️, 7,\n ♣️, 8,\n ♥️, 6,\n ♥️, 3,\n ♥️, Q]"
  }
]